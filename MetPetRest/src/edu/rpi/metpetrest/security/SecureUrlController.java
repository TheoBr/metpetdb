package edu.rpi.metpetrest.security;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.json.MappingJacksonJsonView;

import edu.rpi.metpetrest.dao.ChemicalAnalysisDAOImpl;
import edu.rpi.metpetrest.dao.NamedSampleDAOImpl;
import edu.rpi.metpetrest.dao.SampleDAOImpl;
import edu.rpi.metpetrest.dao.UserDAOImpl;

@Controller()
public class SecureUrlController {

	private UserDAOImpl userDAO = null;

	private ChemicalAnalysisDAOImpl chemicalAnalysisDAO = null;
	
	private SampleDAOImpl sampleDAO = null;
	
	private NamedSampleDAOImpl namedSampleDAO = null;

	Logger logger = LoggerFactory.getLogger(SecureUrlController.class);

	public SecureUrlController() {

	}

	
	@PreAuthorize("hasAnyRole('MEMBER', 'ANONYMOUS')")
	@RequestMapping(value = "/secure/search_samples/{startRowNum}/{endRowNum}", method = RequestMethod.GET)
	public ModelAndView getSearchSamples(
			@PathVariable("startRowNum") Long startRowNum,
			@PathVariable("endRowNum") Long endRowNum,
			@RequestParam("ids") String ids)
	{
		//http://localhost:8888/MetPetRest/secure/searchsamples/0/75.json?identity=ANONYMOUS&ids=1628,1977,2638,2200,2201,2202,2203,2204,2213,2212,674,1078,2214,2211,2221,2223,2228,2252,2253,2652,814,644,645,2254,648,2263,2264,646,647,2265,2685,2267,2686,2268,2269,2694,2697,2272,665,2292,2656,815,2205,1100,361,362,1247,2293,2695,308,2311,2687,2312,2313,2314,2307,2308,2309,2310,2336,2648,2206,507,508,513,2337,510,2334,2335,2333,2332,511,512,514,2331,2338,2339,2340,2688,2651,2207,2733,509,506,1241,2345,2346,649,2348,2689,2349,3622,3623,3624,3625,2347,2350,2351,2355,2356,2645,2208,363,2360,2361,2357,2362,2364,2363,2393,2392,2391,2690,2389,2643,2209,2390,2388,2387,2386,2385,2378,2691,2655,2210,1099,2377,2352,2343,1981,1979,1980,1976,2251,2641,2216,1098,364,2662,2217,1235,2606,2218,2649,805,2215,653,2222,2224,2225,2227,312,2231,650,2230,668,2239,2232,2240,2654,2219,2249,2250,2235,2236,2237,2238,2241,656,2242,2243,2244,2644,2220,2245,2246,2247,2294,2233,2234,2248,2255,2256,2647,2226,2257,2258,2296,2295,2298,2299,2297,2300,2301,2646,2229,365,2302,2303,2304,2306,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2305,2767,2768,2769,2770,2771,2772,2773,2394,2650,2259,2400,2399,2398,2397,2395,2396,2260,366,367,2261,2602,2262,2619,2266,2660,2270,806,1637,368,2271,1097,1096,2639,2273,2684,2640,2274,2634,2276,2277,1095,2658,1094,2613,2275,1093,2629,2288,2611,2278,2289,1092,2653,807,2627,2279,1091,2659,2280,2637,2290,1090,2610,2281,1089,2657,2291,2623,2287,2632,2282,2636,2283,1088,2617,2284,2624,2285,2663,808,2614,2286,795,802,798,804,799,794,801,803,800,796,797,1912,1905,1906,1908,1907,1910,1909,2604,2317,309,2633,2318,1236,1113,2616,2319,2696,1115,2626,2322,1237,1114,2630,2321,1986,1983,1985,1984,2635,2320,2608,2323,310,2326,2631,2325,2664,809,1101,2692,2607,2327,2620,2328,2618,2329,2621,2330,2625,2341,1087,2615,2342,2609,2344,2605,2353,2628,2354,2667,2358,2668,810,2601,2365,265,266,267,261,262,263,264,1913,1914,1915,1916,1917,1918,1919,1920,1921,2603,2666,2366,2612,2367,1086,2622,2369,2368,2370,2371,1085,2376,2372,2642,811,369,370,1638,2375,2374,2373,1274,1268,1266,2379,2324,2380,1490,313,1487,1488,2381,1489,1492,1491,1495,1493,1494,2382,299,282,286,287,288,283,284,285,2383,1998,2661,812,2693,371,311,2732,2384,659,1271,1995,1996,1992,1993,1994,1997,2000,1999,300,662,660,2315,1267,1265,661,1278,663,657,651,655,671,652,664,1275,1272,2316,1084,2893,2894,2895,1276,1273,1269,2359,1083,1279,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1597,1595,1599,1600,1641,1642,1640,1643,1639,1645,1644,1646,1082,1583,1585,1598,1593,1594,1581,1588,1589,1592,1582,1584,1081,1579,1580,1080,1079,2665,813,2896,2897,2832,2833,298,280,292,294,293,290,289,291,296,297,281,295,1077,1076,2996,2998,2997,2734,2735,2736,2737,2856,2846,2848,2851,2850,2849,2853,2852,2847,2854,2855,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3035,3034,3036,3037,3039,3038,3040,3041,3042,3043,3044,3045,3046,3047,3010,3008,3009,3048,3049,3050,3051,3052,3053,3054,3055,3011,3012,3013,3014,3015,1626,1733,1734,1741,1735,2869,1233,1234,1659,1648,1630,1654,1742,1743,1744,1631,1632,1657,1745,1658,1656,1655,1652,1650,1647,1653,1649,1651,1245,676,675,673,654,2738,2739,1726,1725,1724,1722,1723,1729,1728,1727,1730,1731,1732,985,983,2834,2699,492,494,490,489,1885,1884,1883,1882,1881,1880,701,2698,1746,1750,643,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,487,488,973,1073,1074,1075,1071,1072,1069,1070,1068,1067,1102,469,468,466,462,473,464,472,471,470,467,465,463,1911,2835,1219,2868,2870,2867,666,672,658,359,360,358,1740,1066,1065,1736,1749,1748,2787,2791,2788,2789,2792,2790,2898,2899,2900,2901,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2700,1924,1925,1926,2705,1879,1878,2715,2729,2727,2720,2703,2713,2714,2716,2719,2712,2702,2706,2711,2701,1877,1876,268,271,277,270,278,272,269,276,274,279,275,273,2836,1103,1104,1105,1106,2704,2710,2718,2721,2722,2724,2725,2708,2709,2707,2731,2730,709,705,706,707,708,704,710,703,702,2728,1239,1240,2819,2820,984,987,981,982,990,986,977,978,975,974,1064,670,667,677,669,1469,1472,1473,1468,1470,1471,1474,1475,1107,1108,1109,1110,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2086,2087,2088,2089,2104,2090,2091,700,1228,1227,1226,1224,1230,1223,1229,1222,1221,1220,988,989,2821,1634,1636,498,493,497,496,495,505,499,500,501,502,503,504,1874,1875,1872,1871,1870,1869,1868,1867,1866,1865,1864,1863,1862,1873,1861,1860,1859,2902,2903,1927,1928,1929,979,980,976,1858,1857,817,818,816,1063,1747,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1702,1692,1693,1694,1695,1696,1697,1698,1699,1246,1691,1701,1700,1243,2822,1978,1111,1062,1061,1249,1242,1244,2823,2824,2825,2826,2827,2828,1922,1635,1633,1270,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,1771,2865,2829,2830,2726,1238,1232,3001,3002,3003,2999,3000,2723,2717,1060,1059,491,1737,1776,1231,1225,1277,1248,1467,1466,1464,1463,1465,332,333,334,335,336,337,338,339,1772,340,341,342,1765,314,1775,1767,1768,1773,1766,1774,1769,1627,315,316,317,1770,1763,318,301,319,302,320,321,322,303,738,323,324,325,304,326,305,327,328,306,1764,1629,329,330,331,307,2858,2857,3004,3005,3006,3007,1738,1739,2831,356,357,1856,1855,1853,1854,2859,2860,2861,2862,2863,1112,2864,2802,2803,2798,2799,2800,2801,1930,1148,1486,719,734,725,737,732,720,721,722,729,733,724,723,726,731,730,735,727,718,736,728,519,515,517,518,516,541,537,531,533,532,536,538,539,540,534,535,715,716,714,713,712,711,717,777,780,781,778,787,788,783,789,776,784,773,774,782,779,785,786,775,405,403,404,406,1171,1172,1173,1174,1175,1185,1186,1187,1176,1177,1178,1179,1180,1181,1182,1183,1184,1192,1193,1194,1195,1196,1197,1198,1199,1188,1189,1190,1191,431,437,433,432,434,435,436,430

		ModelAndView mav = new ModelAndView();
		mav.setViewName("searchSamples");
		mav.setView(new MappingJacksonJsonView());
		MappingJacksonJsonView myView = (MappingJacksonJsonView) mav.getView();
		myView.setContentType("text/javascript");

		StringTokenizer strtok = new StringTokenizer(ids, ",");
		List<Long> idList = new ArrayList<Long>();
		
		while(strtok.hasMoreTokens())
		{
		idList.add(Long.valueOf(strtok.nextToken()));
		}
		
		List<Map<String, Object>> jsonSamples = namedSampleDAO.getSampleSearch(idList, endRowNum, startRowNum);
		
		mav.addObject("searchSamples", jsonSamples);

		return mav;
	}

			
	@PreAuthorize("hasAnyRole('MEMBER', 'ANONYMOUS')")
	@RequestMapping(value = "/secure/chemical_analyses/{subSampleId}/{startRowNum}/{endRowNum}", method = RequestMethod.GET)
	public ModelAndView getChemicalAnalyses(
			@PathVariable("subSampleId") String subSampleId,
			@PathVariable("startRowNum") String startRowNum,
			@PathVariable("endRowNum") String endRowNum) {

		ModelAndView mav = new ModelAndView();
		mav.setViewName("chemicalAnalyses");
		mav.setView(new MappingJacksonJsonView());
		MappingJacksonJsonView myView = (MappingJacksonJsonView) mav.getView();

		myView.setContentType("text/javascript");

		List<Map<String, String>> jsonChemAnalyses = chemicalAnalysisDAO
				.getAllChemicalAnalyses(subSampleId, Long.valueOf(startRowNum),
						Long.valueOf(endRowNum));

		mav.addObject("chemicalAnalyses", jsonChemAnalyses);

		return mav;
	}

	
	@PreAuthorize("hasRole('MEMBER')")
	@RequestMapping(value = "/secure/mysamples/{startRowNum}/{endRowNum}", method = RequestMethod.GET)
	public ModelAndView getMySamples(
			@PathVariable("startRowNum") String startRowNum,
			@PathVariable("endRowNum") String endRowNum) {

		ModelAndView mav = new ModelAndView();
		mav.setViewName("samples");
		mav.setView(new MappingJacksonJsonView());
		MappingJacksonJsonView myView = (MappingJacksonJsonView) mav.getView();

		myView.setContentType("text/javascript");

		List<Map<String, Object>> jsonSamples = sampleDAO.getMySamples(Long.valueOf(startRowNum),
						Long.valueOf(endRowNum));

		mav.addObject("samples", jsonSamples);

		return mav;
	}
	
	public UserDAOImpl getUserDAO() {
		return userDAO;
	}

	public void setUserDAO(UserDAOImpl userDAO) {
		this.userDAO = userDAO;
	}

	public ChemicalAnalysisDAOImpl getChemicalAnalysisDAO() {
		return chemicalAnalysisDAO;
	}

	public void setChemicalAnalysisDAO(
			ChemicalAnalysisDAOImpl chemicalAnalysisDAO) {
		this.chemicalAnalysisDAO = chemicalAnalysisDAO;
	}

	public SampleDAOImpl getSampleDAO() {
		return sampleDAO;
	}

	public void setSampleDAO(SampleDAOImpl sampleDAO) {
		this.sampleDAO = sampleDAO;
	}


	public NamedSampleDAOImpl getNamedSampleDAO() {
		return namedSampleDAO;
	}


	public void setNamedSampleDAO(NamedSampleDAOImpl namedSampleDAO) {
		this.namedSampleDAO = namedSampleDAO;
	}

}
