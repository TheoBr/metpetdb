<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="edu.rpi.metpetdb.client.model">
  <class name="Image" table="images">
    <id name="id" column="image_id" unsaved-value="0">
      <generator class="sequence">
        <param name="sequence">image_seq</param>
      </generator>
    </id>
    <version name="version" />
    
    <property name="checksum" column="checksum"/>
    <property name="width" column="width" />
    <property name="height" column="height" />
    <property name="checksum64x64" column="checksum_64x64" />
    <property name="checksumHalf" column="checksum_half" />
    <property name="checksumMobile" column="checksum_mobile"/>
    <property name="filename" column="filename" />
    <property name="collector" column="collector" length="100" />
    <property name="scale" />
    <property name="description" column="description" type="java.lang.String"/>
    <property name="publicData" column="public_data" type="yes_no" />
    <many-to-one name="owner" column="user_id" />

    <set name="references" table="image_reference" cascade="persist,merge" lazy="false">
      <key column="image_id" />
      <many-to-many class="Reference" column="reference_id" />
    </set>
    
    <set name="comments" cascade="all,delete-orphan" >
      <key column="image_id" not-null="true"/>
      <one-to-many class="ImageComment" />
    </set>

   <many-to-one name="subsample" column="subsample_id" class="Subsample"/>
   <many-to-one name="sample" column="sample_id" class="Sample"  cascade="none"/>
   <many-to-one name="imageType" column="image_type_id" class="ImageType" lazy="false" cascade="none"/>
   
   <joined-subclass name="XrayImage" table="xray_image">
	   	<key column="image_id"/>
	    <property name="dwelltime" column="dwelltime"/>
	    <property name="current" column="current"/>
	    <property name="voltage" column="voltage"/>
	    <property name="element" column="element"/>
   </joined-subclass>
     
  <filter name="imagePublicOrUser"
     		condition="( user_id=:userId OR public_data='Y')" />
</class>
  <query name="Image.byId">
    from Image i
    where i.id = :id
  </query>
  
  <query name="Image.bySubsampleId">
    from Image i
    where i.subsample.id = :subsampleId
  </query>
  <query name="Image-ids-publicData.bySubsampleId">
  	select i.id, i.publicData
    from Image i
    where i.subsample.id = :subsampleId
  </query>
  <query name="Image.bySampleId">
    from Image i 
    where i.sample.id = :sampleId
  </query>
  <query name="Image.bySubsampleId,size">
    select count(*) from Image i
    where i.subsample.id = :id
  </query>
  <query name="Image.bySubsampleId/image">
    from Image i
    where i.subsample.id = :id
    order by i.filename
  </query>
  <query name="Image.bySubsampleId/filename">
	from Image i
    where i.subsample.id = :id
    order by i.filename
  </query>
   <query name="Image.bySubsampleId/imageType">
	from Image i
    where i.subsample.id = :id
    order by i.imageType.imageType
  </query>
  <query name="Image.bySubsampleId/collector">
	from Image i
    where i.subsample.id = :id
    order by i.collector
  </query>
  
  
  <query name="Image.bySampleIdbyFilename">
    from Image i
    where i.sample.id = :id 
    and lower(i.filename) = lower(:filename)
  </query>
  <query name="Image.bySubsampleIdbyFilename">
    from Image i
    where i.subsample.id = :id 
    and lower(i.filename) = lower(:filename)
  </query>
  
  <filter-def name="imagePublicOrUser">
  	<filter-param name="userId" type="long" />
  </filter-def>

</hibernate-mapping>