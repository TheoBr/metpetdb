<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="edu.rpi.metpetdb.client.model">
  <class name="Sample" table="samples">
    <id name="id" column="sample_id" unsaved-value="0">
      <generator class="sequence">
        <param name="sequence">sample_seq</param>
      </generator>
    </id>
    <version name="version" />
    <property name="sesarNumber" column="sesar_number" length="9" />
    <property name="location" column="location"
              type="edu.rpi.metpetdb.server.dao.GeometryType" />
    <property name="number" column="number" />
    <property name="collectionDate" column="collection_date" />
    <property name="datePrecision" column="date_precision" />
    <property name="publicData" column="public_data" type="yes_no" />
    <property name="country" column="country" length="100" />
    <property name="description" column="description" length="100" />
    <property name="collector" column="collector" length="100" />
    <property name="locationText" column="location_text" length="50" />
    <property name="locationError" column="location_error" />
    
    <property name="subsampleCount" formula="(select count(*) from subsamples s
    										where s.sample_id=sample_id
    										AND s.public_data='Y')" />
	<property name="imageCount" formula="(select count(*) from images i
										where (i.sample_id=sample_id AND i.public_data='Y' AND i.subsample_id is null) OR 
										(i.subsample_id IN (select ss.subsample_id
										from subsamples ss where ss.sample_id=sample_id AND ss.public_data='Y')
										AND i.public_data='Y'))" />
    <property name="analysisCount" formula="(select count(*) from chemical_analyses ca where
    										(ca.public_data='Y' AND ca.subsample_id IN (select ss.subsample_id
    										from subsamples ss where ss.sample_id=sample_id AND ss.public_data='Y')))" />																		
    
    <many-to-one name="owner" column="user_id" lazy="false" update="false"/>
    <many-to-one name="rockType" column="rock_type_id" lazy="false" />

	<!-- delete-orphan causes the subsamples to get deleted when saving a sample -->
	<set name="subsamples" inverse="true" cascade="delete" >
      <key column="sample_id" not-null="true"/>
      <one-to-many class="Subsample" />
      <filter name="samplePublicOrUser"
     		condition="( user_id=:userId OR public_data='Y')" />
    </set>
    
    <set name="comments" inverse="true" table="sample_comments" cascade="delete" >
      <key column="sample_id" not-null="true" />
      <one-to-many class="SampleComment"/>
    </set>
    
    <set name="projects" table="project_samples" cascade="none">
      <key column="sample_id" />
      <many-to-many class="Project" column="project_id" />
    </set>

    <set name="regions" table="sample_regions" cascade="persist,merge" lazy="false">
      <key column="sample_id" />
      <many-to-many class="Region" column="region_id" order-by="lower(name)"/>
    </set>

    <set name="metamorphicGrades" table="sample_metamorphic_grades" cascade="none" lazy="false">
      <key column="sample_id" />
      <many-to-many class="MetamorphicGrade" column="metamorphic_grade_id" order-by="lower(name)"/>
    </set>

    <set name="references" table="sample_reference" cascade="persist,merge" lazy="false">
      <key column="sample_id" />
      <many-to-many class="Reference" column="reference_id" order-by="lower(name)"/>
    </set>

	<set name="images" table="images" cascade="all,delete-orphan" order-by="filename DESC"> 
      <key column="sample_id" />
      <one-to-many class="Image" />
      <filter name="samplePublicOrUser"
     		condition="( user_id=:userId OR public_data='Y')" />
    </set>

    
    <!-- Hibernate updates sets by using insert/delete, not update -->
    <set name="minerals" table="sample_minerals" cascade="save-update" lazy="false">
      <key column="sample_id" />
      <composite-element class="SampleMineral" >
      	<property name="amount" column="amount" type="float"/>
	    <many-to-one name="mineral" class="Mineral" column="mineral_id" lazy="false" />
	  </composite-element>
    </set>
    
    <filter name="boundingBox"
            condition="ST_Intersects(location, :polygon)" 
            />
            
     <filter name="user"
     		condition="user_id=:id" />
     		
     <filter name="public"
     		condition="public_data='Y'" />
     		
     <filter name="samplePublicOrUser"
     		condition="( user_id=:userId OR public_data='Y')" />
  </class>
  
  

  <query name="Sample.byId">
    from Sample s
    inner join fetch s.owner
    where s.id = :id
  </query>
  <query name="Sample.all,size">
    select count(*) from Sample s
  </query>
  <query name="Sample.all/id">
    from Sample s
    inner join fetch s.owner
    order by s.id
  </query>
  <query name="Sample.all/sesarNumber">
    from Sample s
    inner join fetch s.owner
    order by s.sesarNumber
  </query>
  <query name="Sample.all/number">
    from Sample s
    inner join fetch s.owner
    order by (lower(s.number))
  </query>
  <query name="Sample.all/owner">
    from Sample s
    inner join fetch s.owner
    order by (lower(s.owner.name))
  </query>
  <query name="Sample.all/rockType">
    from Sample s
    inner join fetch s.owner
    order by s.rockType
  </query>
  <query name="Sample.all/collectionDate">
    from Sample s
    inner join fetch s.owner
    order by s.collectionDate
  </query>
  <query name="Sample.all/publicData">
    from Sample s
    inner join fetch s.owner
    order by s.publicData
  </query>
  <query name="Sample.all/latitude">
    from Sample s
    inner join fetch s.owner
    order by s.location
  </query>
  <query name="Sample.all/longitude">
    from Sample s
    inner join fetch s.owner
    order by s.location
  </query>
  <query name="Sample.all/country">
    from Sample s
    inner join fetch s.owner
    order by (lower(s.country))
  </query>
  <query name="Sample.all/subsampleCount">
  	from Sample s
	inner join fetch s.owner
	order by s.subsampleCount 
  </query>
  <query name="Sample.all/imageCount">
   	from Sample s
	inner join fetch s.owner
	order by s.imageCount 
  </query>
  <query name="Sample.all/analysisCount">
    from Sample s
	inner join fetch s.owner
	order by s.analysisCount
  </query>
  <query name="Sample.all/collector">
    from Sample s
    inner join fetch s.owner
    order by (lower(s.collector))
  </query>
  <query name="Sample.all/locationText">
    from Sample s
    inner join fetch s.owner
    order by (lower(s.locationText))
  </query>
  <query name="Sample.byUser.byNumber">
    from Sample s
    inner join fetch s.owner
    where s.owner.id = :id
    and lower(s.number) = lower(:number)
  </query>
  
  <query name="Sample.forProject,size">
  	select count(*) from Sample s
  	inner join s.projects as project with project.id = :id
  </query>
  <query name="Sample.forProject/number">
  	select s from Sample s
  	inner join s.projects as project with project.id = :id
  	order by s.number
  </query>
  
  <query name="Sample.Collectors/Collector">
    Select Distinct collector
    from Sample s
    where s.publicData = 'Y'
    order by s.collector
  </query>
  <query name="Sample.Countries/Countries">
    Select Distinct country
    from Sample s
    order by s.country
  </query>
  
  <filter-def name="boundingBox">
    <filter-param name="polygon" type="edu.rpi.metpetdb.server.dao.GeometryType"/>
  </filter-def>
  
  <filter-def name="user">
    <filter-param name="id" type="long"/>
  </filter-def>
  <filter-def name="public">
  </filter-def>
  <filter-def name="samplePublicOrUser">
  	<filter-param name="userId" type="int" />
  </filter-def>
  
  
 

</hibernate-mapping>