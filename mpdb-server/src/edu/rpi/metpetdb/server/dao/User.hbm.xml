<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="edu.rpi.metpetdb.client.model">
  <class name="User" table="users">
    <id name="id" column="user_id" unsaved-value="0">
      <generator class="sequence">
        <param name="sequence">user_seq</param>
      </generator>
    </id>
    <version name="version" />
    <property name="name" column="name" />
    <property name="emailAddress" column="email" length="255" />
    <property name="encryptedPassword" column="password" />
    <property name="address" />
    <property name="city" />
    <property name="province"/>
    <property name="country" />
    <property name="postalCode" column="postal_code" />
    <property name="institution" />
    <property name="professionalUrl" column="professional_url" />
	<property name="enabled" type="yes_no" />
	<property name="confirmationCode" column="confirmation_code" />   
	<property name="contributorEnabled" column="contributor_enabled" type="yes_no" />
	<property name="contributorCode" column="contributor_code" />
	
	<property name="researchInterests" column="research_interests"/>
	<property name="requestContributor" column="request_contributor" type="yes_no"/>
	
	 
	<property name="rank" formula="(select r.rank from roles r where r.role_id=role_id)" />

    <set name="projects" table="project_members">
      <key column="user_id" />
      <many-to-many class="Project" column="project_id" />
    </set>
    
    <set name="invites" table="project_invites">
      <key column="user_id" />
      <many-to-many class="Project" column="project_id"/>
    </set>
    
    <many-to-one name="role" column="role_id"/>
    
    <filter name="hasSamplePublicOrUser"
     		condition="(exists (select 1 from samples s where s.user_id = user_id and s.public_data = 'Y') 
     			or user_id = :userId)" />
  </class>
  
  <query name="User.byProjectId">
  	from User u
  	inner join u.projects as project with project.id = :id
  </query> 
  <query name="User.byProjectId.Ids">
  	select u.id
  	from User u
  	inner join u.projects as project with project.id = :id
  </query>
  <query name="User.byProjectId/name">
    select u
  	from User u
  	inner join u.projects as project with project.id = :id
  	order by u.name
  </query>
  <query name="User.byProjectId/emailAddress">
    select u
  	from User u
  	inner join u.projects as project with project.id = :id
  	order by u.emailAddress
  </query>
  <query name="User.byProjectId,size">
    select count(*)
  	from User u
  	inner join u.projects as project with project.id = :id
  </query>

  <query name="User.byId">
    from User u
    where u.id = :id
  </query>

  <query name="User.byEmailAddress">
    from User u
    where u.emailAddress = :emailAddress
  </query>
  
  <query name="User.byContributorCode">
  	from User u
  	where u.contributorCode = :contributorCode
  </query>
  
  <query name="User.all/name">
  	select name
  	from User u
    order by u.name
   </query>
   <query name="User.eligableSponsors">
     from User u
     where u.rank >= :rank
     order by lower(u.name)
   </query>
     
   <filter-def name="hasSamplePublicOrUser">
  	<filter-param name="userId" type="int" />
  </filter-def>
</hibernate-mapping>