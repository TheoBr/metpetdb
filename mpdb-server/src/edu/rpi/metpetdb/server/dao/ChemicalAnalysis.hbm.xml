<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="edu.rpi.metpetdb.client.model">
  <class name="ChemicalAnalysis" table="chemical_analyses">
    <id name="id" column="chemical_analysis_id" unsaved-value="0">
      <generator class="sequence">
        <param name="sequence">chemical_analyses_seq</param>
      </generator>
    </id>
    <version name="version" />
    <property name="publicData" column="public_data" type="yes_no" />
    <property name="referenceX" column="reference_x" />
    <property name="referenceY" column="reference_y" />
    <property name="stageX" column="stage_x" />
    <property name="stageY" column="stage_y" />
    <property name="datePrecision" column="date_precision" />
    <property name="subsampleId" column="subsample_id" update="false" insert="false"/>
    <property name="spotId" column="spot_id"/>
    <property name="analysisMethod" column="analysis_method" type="java.lang.String"/>
    <property name="location" column="where_done" type="java.lang.String"/>
    <property name="analyst" column="analyst" type="java.lang.String"/>
    <property name="analysisDate" column="analysis_date" />
    <property name="description" column="description" type="java.lang.String"/>
    
    <property name="sampleName" formula="(select sample.number from samples sample
    									where sample.sample_id= ( select ss.sample_id from subsamples ss
    									where ss.subsample_id=subsample_id))" />
    <property name="subsampleName" formula="(select s.name from subsamples s
    										where s.subsample_id=subsample_id)" />
    <many-to-one name="owner" column="user_id" update="false"/>
	<many-to-one name="reference" column="reference_id" class="Reference" lazy="false" cascade="save-update"/>
	<many-to-one name="image" column="image_id" class="Image" lazy="false" cascade="none"/>
    <many-to-one name="subsample" column="subsample_id" class="Subsample"  cascade="none" update="false"/>

	<property name="largeRock" column="large_rock" type="yes_no" />
	<property name="total" column="total" />
	<many-to-one name="mineral" column="mineral_id" class="Mineral" lazy="false" cascade="none"/>
	
	<property name="referenceName" formula="(select r.name from reference r where
    										reference_id = r.reference_id)" />
    <property name="analysisMaterial" formula="(case 
    													when exists (select 1 from minerals m where mineral_id = m.mineral_id)
    														 then (select m.name from minerals m where mineral_id = m.mineral_id)
    													else 'Bulk Rock' 
    											end)" />

    <set name="elements" table="chemical_analysis_elements" lazy="false" cascade="save-update">
      <key column="chemical_analysis_id" />
      <composite-element class="ChemicalAnalysisElement">
      	<!--Composite elements CANNOT be null with a set -->
      	<property name="amount" column="amount"/>
      	<property name="precision" column="precision"/>
      	<property name="precisionUnit" column="precision_type" />
      	<property name="measurementUnit" column="measurement_unit"/>
      	<property name="minAmount" column="min_amount" />
      	<property name="maxAmount" column="max_amount" />
        <many-to-one name="element" class="Element" column="element_id" lazy="false" not-null="true"/>
	  </composite-element>
    </set>

    <set name="oxides" table="chemical_analysis_oxides" lazy="false" cascade="save-update">
      <key column="chemical_analysis_id" />
      <composite-element class="ChemicalAnalysisOxide">
      	<!--Composite elements CANNOT be null with a set -->
      	<property name="amount" column="amount" />
      	<property name="precision" column="precision" />
      	<property name="precisionUnit" column="precision_type" />
      	<property name="measurementUnit" column="measurement_unit"/>
      	<property name="minAmount" column="min_amount" />
      	<property name="maxAmount" column="max_amount"  />
        <many-to-one name="oxide" class="Oxide" column="oxide_id" lazy="false" not-null="true"/>
	  </composite-element>
    </set>
    
      <filter name="chemicalAnalysisPublicOrUser"
	 		condition="(user_id=:userId or public_data='Y' or
	 		(select ss.sample_id from subsamples ss where ss.subsample_id = subsample_id)
	 		in (select ps.sample_id from project_samples ps
	 		where ps.project_id in (select pm.project_id from
	 		project_members pm where pm.user_id = :userId)))" />
     		

  </class>

  <query name="ChemicalAnalysis.byId">
    from ChemicalAnalysis ma
    inner join fetch ma.owner
    where ma.id = :id
  </query>
  <!-- only return a subset of the CA when we are fetching all of them for a sample
  	to reduce the overhead of loading the elements and oxides -->
  <query name="ChemicalAnalysis.bySubsampleId">
  select new ChemicalAnalysis(ma.id, ma.spotId) 
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
  </query>
  <query name="ChemicalAnalysis.bySubsampleIdWithImage">
  select new ChemicalAnalysis(ma.id, ma.spotId, ma.image, ma.referenceX, ma.referenceY) 
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
  </query>
  <query name="ChemicalAnalysis-ids,publicData.bySubsampleId">
    select ma.id, ma.publicData
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
  </query>
  <query name="ChemicalAnalysis.bySubsampleId,size">
    select count(*) from ChemicalAnalysis ma
    where ma.subsample.id = :id
  </query>
  <query name="ChemicalAnalysis.bySubsampleId.byspotId">
  	from ChemicalAnalysis ma
  	where ma.subsample.id = :id
  	and ma.spotId = :spotId
  </query>
  <query name="ChemicalAnalysis.bySubsampleId/spotId">
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
    order by ma.spotId
  </query>
  <query name="ChemicalAnalysis.bySubsampleId/publicData">
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
    order by ma.publicData
  </query>
  <query name="ChemicalAnalysis.bySubsampleId/analysisMethod">
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
    order by (lower(ma.analysisMethod))
  </query>
  <query name="ChemicalAnalysis.bySubsampleId/location">
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
    order by (lower(ma.location))
  </query>
  <query name="ChemicalAnalysis.bySubsampleId/analyst">
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
    order by (lower(ma.analyst))
  </query>
  <query name="ChemicalAnalysis.bySubsampleId/analysisDate">
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
    order by ma.analysisDate
  </query>
  <query name="ChemicalAnalysis.bySubsampleId/reference">
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
    order by (lower(ma.referenceName))
  </query>
  <query name="ChemicalAnalysis.bySubsampleId/total">
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
    order by ma.total
  </query>
  <query name="ChemicalAnalysis.bySubsampleId/description">
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
    order by (lower(ma.description))
  </query>
  <query name="ChemicalAnalysis.bySubsampleId/mineral">
    from ChemicalAnalysis ma
    where ma.subsample.id = :id
    order by (lower(ma.analysisMaterial))
  </query>
    <query name="ChemicalAnalysis.PublicationPublicCount">
  	Select count(*)
  	from ChemicalAnalysis ma
  	where ma.owner.name = 'PUBLICATION'
  	and ma.publicData = 'Y'
  </query>
  <query name="ChemicalAnalysis.PublicCount">
  	Select count(*)
  	from ChemicalAnalysis ma
  	where ma.publicData = 'Y'
  </query>
  <query name="ChemicalAnalysis.PrivateCount">
  	Select count(*)
  	from ChemicalAnalysis ma
  	where ma.publicData = 'N'
  </query>
  <query name="ChemicalAnalysis.PublicElementCount">
  	Select sum(count(elements(ma.elements))) + sum(count(elements(ma.oxides)))
  	from ChemicalAnalysis ma
  	where ma.publicData = 'Y'
  </query>
   <query name="ChemicalAnalysis.PrivateElementCount">
  	Select sum(count(elements(ma.elements))) + sum(count(elements(ma.oxides)))
  	from ChemicalAnalysis ma
  	where ma.publicData = 'N'
  </query>
  
<!-- only returns data that is either public or owned by the current user
   	used when showing the chemical analyses for a user 
   -->
  <filter-def name="chemicalAnalysisPublicOrUser">
  	<filter-param name="userId" type="int" />
  </filter-def>
   
</hibernate-mapping>